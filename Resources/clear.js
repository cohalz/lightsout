// Generated by CoffeeScript 1.6.3
var clear, clearLabel, next, restart, totit;

clear = function(stagenumber) {
  var k, l, _i, _j, _k, _l, _m, _results;
  clearInterval(timerID);
  for (k = _i = 0; _i < 5; k = ++_i) {
    for (l = _j = 0; _j < 5; l = ++_j) {
      label[k][l + 3].removeEventListener("touchstart", listener);
      label[k][l + 3].flag = 0;
    }
  }
  clearCount *= 0;
  stagelabel.opacity = 0.0;
  resetButton.opacity = 0.0;
  titleButton.opacity = 0.0;
  tapCountLabel.opacity = 0.0;
  timerLabel.opacity = 0.0;
  clearLabel.backgroundColor = goalColor;
  timerLabel.flag = 0;
  clearLabel.text = "CLEAR!!\nTAP:" + tapCountLabel.text + "\nTIME:" + timerLabel.text;
  tapCountLabel.text = 0;
  timerLabel.text = "00:00";
  for (k = _k = 0; _k < 6; k = ++_k) {
    for (l = _l = 0; _l < 9; l = ++_l) {
      if (k === 5 && l === 8) {
        clearLabel.opacity = 1.0;
      }
      label[k][l].borderWidth = deviceWidth / 96;
      label[k][l].animate({
        bottom: (deviceWidth / 3) * (5 - k),
        left: (deviceWidth / 3) * (l - 4),
        width: deviceWidth / 3,
        height: deviceWidth / 3
      });
    }
  }
  _results = [];
  for (k = _m = 0; _m < 4; k = ++_m) {
    _results.push((function() {
      var _n, _results1;
      _results1 = [];
      for (l = _n = 0; _n < 3; l = ++_n) {
        _results1.push(label[k + 1][l + 4].borderWidth = 0);
      }
      return _results1;
    })());
  }
  return _results;
};

if (lflag === 0) {
  clearLabel = Ti.UI.createLabel({
    bottom: deviceWidth / 3,
    left: 0,
    width: deviceWidth,
    height: deviceHeight - deviceWidth / 3,
    backgroundColor: goalColor,
    text: "CLEAR!!",
    textAlign: "center",
    verticalAlign: "TEXT_VERTICAL_ALIGNMENT_CENTER",
    color: title.backgroundColor,
    font: {
      fontSize: pannelSize / 1.5,
      fontFamily: ""
    },
    opacity: 0.0
  });
  view.add(clearLabel);
}

restart = function() {
  var k, l, _i, _j;
  clearLabel.opacity = 0.0;
  for (k = _i = 0; _i < 6; k = ++_i) {
    for (l = _j = 0; _j < 9; l = ++_j) {
      label[k][l].borderWidth = deviceWidth / 160;
      label[k][l].animate({
        left: (deviceWidth / 5) * (l - 3),
        bottom: (deviceWidth / 5) * (4 - k),
        width: deviceWidth / 5,
        height: deviceWidth / 5,
        duration: 200
      });
    }
  }
  return Ti.include("stage" + stagenumber + ".js");
};

next = function() {
  var k, l, _i, _j;
  if (stagenumber === 25) {
    return 1;
  }
  clearLabel.opacity = 0.0;
  for (k = _i = 0; _i < 6; k = ++_i) {
    for (l = _j = 0; _j < 9; l = ++_j) {
      label[k][l].borderWidth = deviceWidth / 160;
      label[k][l].animate({
        left: (deviceWidth / 5) * (l - 3),
        bottom: (deviceWidth / 5) * (4 - k),
        width: deviceWidth / 5,
        height: deviceWidth / 5,
        duration: 200
      });
    }
  }
  return Ti.include("stage" + (stagenumber + 1) + ".js");
};

totit = function() {
  var i, j, _i, _results;
  clearLabel.opacity = 0.0;
  _results = [];
  for (i = _i = 0; _i < 6; i = ++_i) {
    _results.push((function() {
      var _j, _results1;
      _results1 = [];
      for (j = _j = 0; _j < 9; j = ++_j) {
        label[i][j].borderWidth = deviceWidth / 96;
        _results1.push(label[i][j].animate({
          bottom: (deviceWidth / 3) * (3 - i),
          left: (deviceWidth / 3) * j,
          width: deviceWidth / 3,
          height: deviceWidth / 3
        }));
      }
      return _results1;
    })());
  }
  return _results;
};

label[5][4].addEventListener('touchstart', totit);

label[5][5].addEventListener('touchstart', restart);

label[5][6].addEventListener('touchstart', next);
